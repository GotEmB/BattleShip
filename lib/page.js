// Generated by IcedCoffeeScript 1.3.3b
var easeInOut;

easeInOut = function(x) {
  return Math.pow((Math.sin((x - 0.5) * Math.PI) + 1) * 0.5, 2);
};

$(document).ready(function() {
  var activateMine, activateYours, canvas, gridl, gridl_s, hline, hline_s, hlines, i, lstyle, mainLayer, mine, mineBack, mineFront, mineGrid, mine_p, mine_s, tool1, tool2, viewport, vline, vline_s, vlines, wdp, yours, yoursBack, yoursFront, yoursGrid, yours_p, yours_s, _ref;
  window.scrollTo(0, 1);
  $(document).bind("touchmove", function(e) {
    return e.preventDefault();
  });
  $(document).bind("touchstart", function(e) {
    return e.preventDefault();
  });
  $(document).bind("touchend", function(e) {
    return e.preventDefault();
  });
  wdp = (_ref = window.devicePixelRatio) != null ? _ref : 1;
  viewport = document.querySelector("meta[name=viewport]");
  viewport.setAttribute('content', "user-scalable=no, width=" + (320 * wdp) + ", height=" + (416 * wdp) + ", initial-scale=" + (1.0 / wdp) + ", maximum-scale=" + (1.0 / wdp));
  canvas = document.getElementById("canvas");
  canvas.setAttribute('width', "" + (320 * wdp));
  canvas.setAttribute('height', "" + (416 * wdp));
  paper.install(window);
  paper.setup(document.getElementById("canvas"));
  mainLayer = project.activeLayer;
  lstyle = {
    strokeColor: "white",
    strokeWidth: 2 * wdp,
    strokeCap: "round"
  };
  vline = new Path();
  vline.style = lstyle;
  vline.add([0, 0]);
  vline.add([0, 300 * wdp]);
  vline_s = new Symbol(vline);
  vlines = (function() {
    var _i, _results;
    _results = [];
    for (i = _i = 0; _i <= 10; i = ++_i) {
      _results.push(vline_s.place([i * 30 * wdp, 150 * wdp]));
    }
    return _results;
  })();
  hline = new Path();
  hline.style = lstyle;
  hline.add([0, 0]);
  hline.add([300 * wdp, 0]);
  hline_s = new Symbol(hline);
  hlines = (function() {
    var _i, _results;
    _results = [];
    for (i = _i = 0; _i <= 10; i = ++_i) {
      _results.push(hline_s.place([150 * wdp, i * 30 * wdp]));
    }
    return _results;
  })();
  gridl = new Group(vlines);
  gridl.addChildren(hlines);
  gridl_s = new Symbol(gridl);
  mineBack = new Layer();
  mainLayer.activate();
  mineGrid = gridl_s.place();
  mineFront = new Layer();
  mainLayer.activate();
  mine = new Group([mineBack, mineGrid, mineFront]);
  mine_s = new Symbol(mine);
  mine_p = mine_s.place([160 * wdp, 160 * wdp]);
  yoursBack = new Layer();
  mainLayer.activate();
  yoursGrid = gridl_s.place();
  yoursFront = new Layer();
  mainLayer.activate();
  yours = new Group([yoursBack, yoursGrid, yoursFront]);
  yours_s = new Symbol(yours);
  yours_p = yours_s.place([160 * wdp, 260 * wdp]);
  yours_p.scale(0.3, [160 * wdp, 410 * wdp]);
  view.draw();
  activateYours = function(e) {
    if (e.time > 0.2) {
      view.onFrame = null;
      mine_p.remove();
      mine_p = mine_s.place([160 * wdp, 160 * wdp]);
      mine_p.scale(0.3, [160 * wdp, 10 * wdp]);
      yours_p.remove();
      yours_p = yours_s.place([160 * wdp, 260 * wdp]);
      return yours_p.scale(1, [160 * wdp, 410 * wdp]);
    } else {
      mine_p.remove();
      mine_p = mine_s.place([160 * wdp, 160 * wdp]);
      mine_p.scale(1.0 - 0.7 * easeInOut(e.time / 0.2), [160 * wdp, 10 * wdp]);
      yours_p.remove();
      yours_p = yours_s.place([160 * wdp, 260 * wdp]);
      return yours_p.scale(1.0 - 0.7 * easeInOut(1 - e.time / 0.2), [160 * wdp, 410 * wdp]);
    }
  };
  activateMine = function(e) {
    if (e.time > 0.2) {
      view.onFrame = null;
      mine_p.remove();
      mine_p = mine_s.place([160 * wdp, 160 * wdp]);
      mine_p.scale(1, [160 * wdp, 10 * wdp]);
      yours_p.remove();
      yours_p = yours_s.place([160 * wdp, 260 * wdp]);
      return yours_p.scale(0.3, [160 * wdp, 410 * wdp]);
    } else {
      mine_p.remove();
      mine_p = mine_s.place([160 * wdp, 160 * wdp]);
      mine_p.scale(1.0 - 0.7 * easeInOut(1 - e.time / 0.2), [160 * wdp, 10 * wdp]);
      yours_p.remove();
      yours_p = yours_s.place([160 * wdp, 260 * wdp]);
      return yours_p.scale(1.0 - 0.7 * easeInOut(e.time / 0.2), [160 * wdp, 410 * wdp]);
    }
  };
  tool1 = new Tool();
  tool1.onMouseDown = function(e) {
    view.onFrame = activateYours;
    return tool2.activate();
  };
  tool2 = new Tool();
  return tool2.onMouseDown = function(e) {
    view.onFrame = activateMine;
    return tool1.activate();
  };
});