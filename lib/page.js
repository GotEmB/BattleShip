// Generated by IcedCoffeeScript 1.3.3d
var async, bindMouseDown, easeInOut, gotoGameOverMenu, pleaseWait, setupCanvas, setupEvents, setupGame, setupPage, socket, viewport, wdp, _ref;

easeInOut = function(x) {
  return Math.pow((Math.sin((x - 0.5) * Math.PI) + 1) * 0.5, 2);
};

async = function(a, b) {
  if (b != null) {
    return setTimeout(b, a);
  } else {
    return setTimeout(a, 0);
  }
};

bindMouseDown = function(sel, fn) {
  $(sel).bind("mousedown", fn);
  return $(sel).bind("touchstart", fn);
};

pleaseWait = {
  counter: 0,
  show: function() {
    pleaseWait.counter++;
    if (pleaseWait.counter > 0) return $("#pleaseWait").css("display", "block");
  },
  hide: function() {
    pleaseWait.counter--;
    if (pleaseWait.counter <= 0) return $("#pleaseWait").css("display", "none");
  }
};

wdp = (_ref = window.devicePixelRatio) != null ? _ref : 1;

viewport = document.querySelector("meta[name=viewport]");

viewport.setAttribute('content', "user-scalable=no, width=" + (320 * wdp) + ", height=" + (416 * wdp) + ", initial-scale=" + (1.0 / wdp) + ", maximum-scale=" + (1.0 / wdp));

socket = io.connect();

socket.on("connect", function() {
  return pleaseWait.hide();
});

socket.on("friendJoined", function() {
  return setupGame();
});

socket.on("friendDisconnected", function() {
  return gotoGameOverMenu("Your friend has left the game.");
});

window.onpopstate = function(e) {
  if (!(e.state != null)) {
    pleaseWait.show();
    socket.emit("resetAll", function() {
      return pleaseWait.hide();
    });
    async(550, function() {
      return setupCanvas({
        reset: true
      });
    });
    $("#menuView").addClass("enableTransitions");
    $("#mainMenu").removeClass("moveLeft");
    $("#mainMenu").removeClass("moveRight");
    $("#newMenu").addClass("moveRight");
    $("#joinMenu").addClass("moveRight");
    $("#gameOverMenu").addClass("moveLeft");
    $("#menuViewContainer").addClass("enableTransitions");
    return $("#menuViewContainer").removeClass("moveDown");
  } else if (e.state.state === "newMenu") {
    $("#menuView").removeClass("enableTransitions");
    $("#mainMenu").addClass("moveLeft");
    $("#newMenu").removeClass("moveRight");
    return $("#joinMenu").addClass("moveRight");
  } else if (e.state.state === "joinMenu") {
    $("#menuView").removeClass("enableTransitions");
    $("#mainMenu").addClass("moveLeft");
    $("#newMenu").addClass("moveRight");
    return $("#joinMenu").removeClass("moveRight");
  } else if (e.state.state === "setupShips") {
    $("#menuView").removeClass("enableTransitions");
    $("#menuView").addClass("moveDown");
    return setupCanvas({
      setupShips: e.state.board
    });
  }
};

setupPage = function() {
  var canvas;
  window.scrollTo(0, 1);
  $(document).bind("touchmove", function(e) {
    return e.preventDefault();
  });
  $(document).bind("touchstart", function(e) {
    if (!$(e.srcElement).hasClass("selectable")) return e.preventDefault();
  });
  $(document).bind("touchend", function(e) {
    if (!$(e.srcElement).hasClass("selectable")) return e.preventDefault();
  });
  pleaseWait.show();
  canvas = document.getElementById("canvas");
  canvas.setAttribute('width', "" + (320 * wdp));
  canvas.setAttribute('height', "" + (416 * wdp));
  paper.install(window);
  paper.setup(document.getElementById("canvas"));
  $("html, body").css("width", 320 * wdp);
  $("html, body").css("height", 416 * wdp);
  $("#menuView").css("-webkit-transform", "scale(" + wdp + ")");
  $("#menuView").css("display", "block");
  $("#pleaseWait div.container div.spinner").css("width", "" + (60 * wdp) + "px");
  $("#pleaseWait div.container div.spinner").css("height", "" + (60 * wdp) + "px");
  $("#pleaseWait div.container").css("padding", "" + (1.5 * wdp) + "em " + (1.5 * wdp) + "em " + (1.25 * wdp) + "em");
  $("#pleaseWait div.container").css("margin", "" + (153 * wdp) + "px " + (112 * wdp) + "px");
  return $("#gameId_Entry").focusout(function() {
    return window.scrollTo(0, 1);
  });
};

setupEvents = function() {
  bindMouseDown("#newGame_btn", function(e) {
    pleaseWait.show();
    return socket.emit("newGame", function(data) {
      if ((data != null) && data.status === "Game created") {
        $("#gameId").text(data.id);
        $("#menuView").addClass("enableTransitions");
        $("#mainMenu").addClass("moveLeft");
        $("#newMenu").removeClass("moveRight");
        history.pushState({
          state: "newMenu"
        }, "", "");
      } else {
        alert("Could not create game.");
        socket = io.connect();
      }
      return pleaseWait.hide();
    });
  });
  bindMouseDown("#joinGame_btn", function(e) {
    $("#gameId_entry").text("");
    $("#menuView").addClass("enableTransitions");
    $("#mainMenu").addClass("moveLeft");
    $("#joinMenu").removeClass("moveRight");
    return history.pushState({
      state: "joinMenu"
    }, "", "");
  });
  bindMouseDown("#enterGameId_btn", function(e) {
    pleaseWait.show();
    return socket.emit("joinGame", $("#gameId_entry").text(), function(data) {
      if ((data != null) && data.status === "Game joined") {
        setupGame();
      } else {
        alert((data != null) && (data.status != null) ? data.status : "Could not join game.");
      }
      return pleaseWait.hide();
    });
  });
  return bindMouseDown("#gameOverOkay_btn", function(e) {
    return history.back();
  });
};

setupGame = function() {
  async(550, function() {
    $("#menuView").removeClass("enableTransitions");
    $("#newMenu").addClass("moveRight");
    $("#joinMenu").addClass("moveRight");
    return $("#mainMenu").removeClass("moveLeft");
  });
  $("#menuViewContainer").addClass("enableTransitions");
  $("#menuViewContainer").addClass("moveDown");
  setupCanvas({
    setupShips: null
  });
  return history.replaceState({
    state: "setupShips"
  }, "", "");
};

gotoGameOverMenu = function(msg) {
  $("#gameOver_msg").text(msg != null ? msg : "Something's happened.");
  async(550, function() {
    return setupCanvas({
      reset: true
    });
  });
  $("#menuView").removeClass("enableTransitions");
  $("#mainMenu").removeClass("moveLeft");
  $("#mainMenu").addClass("moveRight");
  $("#newMenu").addClass("moveRight");
  $("#joinMenu").addClass("moveRight");
  $("#gameOverMenu").removeClass("moveLeft");
  $("#menuViewContainer").addClass("enableTransitions");
  $("#menuViewContainer").removeClass("moveDown");
  return history.replaceState(null, "", "");
};

setupCanvas = function(data) {
  var Game, activateMine, activateYours, mainLayer, makeShip,
    _this = this;
  mainLayer = project.activeLayer;
  while (mainLayer.children.length > 0) {
    mainLayer.children[0].remove();
  }
  if ((data.reset != null) && data.reset) {
    return $("#canvas").css("display", "none");
  }
  $("#canvas").css("display", "block");
  view.draw();
  Game = (function() {

    function Game() {}

    Game.Board = (function() {

      function Board() {}

      Board.prototype.symbol = null;

      Board.prototype.placed = null;

      Board.prototype.back = null;

      Board.prototype.front = null;

      return Board;

    })();

    Game.Ships = (function() {

      function Ships() {}

      Ships.prototype.aircraftCarrier = null;

      Ships.prototype.battleShip = null;

      Ships.prototype.submarine = null;

      Ships.prototype.cruiser = null;

      Ships.prototype.destroyer = null;

      return Ships;

    })();

    Game.Player = (function() {

      function Player() {}

      Player.prototype.board = new Game.Board();

      Player.prototype.ships = new Game.Ships();

      return Player;

    })();

    Game.mine = new Game.Player();

    Game.yours = new Game.Player();

    return Game;

  })();
  (function() {
    var gridl, hline, hline_s, hlines, i, lstyle, vline, vline_s, vlines;
    lstyle = {
      strokeColor: "white",
      strokeWidth: 2 * wdp,
      strokeCap: "round"
    };
    vline = new Path();
    vline.style = lstyle;
    vline.add([0, 0]);
    vline.add([0, 300 * wdp]);
    vline_s = new Symbol(vline);
    vlines = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; _i <= 10; i = ++_i) {
        _results.push(vline_s.place([i * 30 * wdp, 150 * wdp]));
      }
      return _results;
    })();
    hline = new Path();
    hline.style = lstyle;
    hline.add([0, 0]);
    hline.add([300 * wdp, 0]);
    hline_s = new Symbol(hline);
    hlines = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; _i <= 10; i = ++_i) {
        _results.push(hline_s.place([150 * wdp, i * 30 * wdp]));
      }
      return _results;
    })();
    gridl = new Group(vlines);
    gridl.addChildren(hlines);
    return _this.gridl_s = new Symbol(gridl);
  })();
  (function() {
    var mine, mineGrid;
    Game.mine.board.back = new Layer();
    mainLayer.activate();
    mineGrid = gridl_s.place();
    Game.mine.board.front = new Layer();
    mainLayer.activate();
    mine = new Group([Game.mine.board.back, mineGrid, Game.mine.board.front]);
    return Game.mine.board.symbol = new Symbol(mine);
  })();
  (function() {
    var yours, yoursGrid;
    Game.yours.board.back = new Layer();
    mainLayer.activate();
    yoursGrid = gridl_s.place();
    Game.yours.board.front = new Layer();
    mainLayer.activate();
    yours = new Group([Game.yours.board.back, yoursGrid, Game.yours.board.front]);
    return Game.yours.board.symbol = new Symbol(yours);
  })();
  (function() {
    var arc, arrow, box, rotate;
    box = new Path.Rectangle([-14 * wdp, -14 * wdp], [28 * wdp, 28 * wdp]);
    box.style = {
      fillColor: "white",
      strokeWidth: 2 * wdp,
      strokeColor: "white",
      strokeCap: "square"
    };
    arc = new Path.Circle([0, 0], 6 * wdp);
    arc.style = {
      strokeColor: "black",
      strokeWidth: 3 * wdp,
      strokeCap: "round"
    };
    arc.closed = false;
    arc.rotate(-90);
    arrow = new Path([[1 * wdp, 0], [11 * wdp, 0], [6 * wdp, 5 * wdp]]);
    arrow.style = {
      fillColor: "black"
    };
    arrow.closePath();
    rotate = new Group([box, arc, arrow]);
    _this.rotate_s = new Symbol(rotate);
    _this.rotate_s.mouseDown = function() {
      box.fillColor = "black";
      arc.strokeColor = "white";
      return arrow.fillColor = "white";
    };
    return _this.rotate_s.mouseUp = function() {
      box.fillColor = "white";
      arc.strokeColor = "black";
      return arrow.fillColor = "black";
    };
  })();
  (function() {
    var arrow, box, next;
    box = new Path.Rectangle([-14 * wdp, -14 * wdp], [28 * wdp, 28 * wdp]);
    box.style = {
      fillColor: "white",
      strokeWidth: 2 * wdp,
      strokeColor: "white",
      strokeCap: "square"
    };
    arrow = new Path([[-3 * wdp, -8 * wdp], [7 * wdp, 0], [-3 * wdp, 8 * wdp]]);
    arrow.style = {
      fillColor: "black"
    };
    arrow.closePath();
    next = new Group([box, arrow]);
    _this.next_s = new Symbol(next);
    _this.next_s.mouseDown = function() {
      box.fillColor = "black";
      arc.strokeColor = "white";
      return arrow.fillColor = "white";
    };
    return _this.next_s.mouseUp = function() {
      box.fillColor = "white";
      arc.strokeColor = "black";
      return arrow.fillColor = "black";
    };
  })();
  makeShip = function(n) {
    var line, select, ship;
    line = new Path([[0, 0], [150 * wdp, 0]]);
    line.style = {
      strokeColor: "white",
      strokeWidth: 10 * wdp,
      strokeCap: "round"
    };
    select = new Path([[0, 0], [150 * wdp, 0]]);
    select.style = {
      strokeColor: "cyan",
      strokeWidth: 10 * wdp,
      strokeCap: "round"
    };
    select.strokeColor.alpha = 0;
    ship = new Group([line, select]);
    ship.select = function() {
      return select.visible = true;
    };
    ship.deselect = function() {
      return select.visible = false;
    };
    return ship;
  };
  (function() {
    var player, ship, _i, _len, _ref1, _results;
    _ref1 = ["mine", "yours"];
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      player = _ref1[_i];
      _results.push((function() {
        var _results1;
        _results1 = [];
        for (ship in Game.Ships.prototype) {
          Game[player].ships[ship] = makeShip((function() {
            switch (ship) {
              case "aircraftCarrier":
                return 5;
              case "battleShip":
                return 4;
              case "submarine":
                return 3;
              case "cruiser":
                return 3;
              case "destroyer":
                return 2;
            }
          })());
          Game[player].board.front.addChild(Game[player].ships[ship]);
          _results1.push(Game[player].ships[ship].visible = false);
        }
        return _results1;
      })());
    }
    return _results;
  })();
  (function() {
    Game.mine.board.placed = Game.mine.board.symbol.place([160 * wdp, 160 * wdp]);
    _this.rotate_p = _this.rotate_s.place([260 * wdp, 335 * wdp]);
    return _this.next_p = _this.next_s.place([295 * wdp, 335 * wdp]);
  })();
  activateYours = function(e) {
    if (e.time > 0.2) {
      view.onFrame = null;
      _this.mine_p.remove();
      _this.mine_p = mine_s.place([160 * wdp, 160 * wdp]);
      _this.mine_p.scale(0.3, [160 * wdp, 10 * wdp]);
      _this.yours_p.remove();
      _this.yours_p = yours_s.place([160 * wdp, 260 * wdp]);
      return _this.yours_p.scale(1, [160 * wdp, 410 * wdp]);
    } else {
      _this.mine_p.remove();
      _this.mine_p = mine_s.place([160 * wdp, 160 * wdp]);
      _this.mine_p.scale(1.0 - 0.7 * easeInOut(e.time / 0.2), [160 * wdp, 10 * wdp]);
      _this.yours_p.remove();
      _this.yours_p = yours_s.place([160 * wdp, 260 * wdp]);
      return _this.yours_p.scale(1.0 - 0.7 * easeInOut(1 - e.time / 0.2), [160 * wdp, 410 * wdp]);
    }
  };
  activateMine = function(e) {
    if (e.time > 0.2) {
      view.onFrame = null;
      _this.yours_p.remove();
      _this.yours_p = yours_s.place([160 * wdp, 260 * wdp]);
      _this.yours_p.scale(0.3, [160 * wdp, 410 * wdp]);
      _this.mine_p.remove();
      _this.mine_p = mine_s.place([160 * wdp, 160 * wdp]);
      return _this.mine_p.scale(1, [160 * wdp, 10 * wdp]);
    } else {
      _this.yours_p.remove();
      _this.yours_p = yours_s.place([160 * wdp, 260 * wdp]);
      _this.yours_p.scale(1.0 - 0.7 * easeInOut(e.time / 0.2), [160 * wdp, 410 * wdp]);
      _this.mine_p.remove();
      _this.mine_p = mine_s.place([160 * wdp, 160 * wdp]);
      return _this.mine_p.scale(1.0 - 0.7 * easeInOut(1 - e.time / 0.2), [160 * wdp, 10 * wdp]);
    }
  };
  /*
  	tool1 = new Tool()
  	tool1.onMouseDown = (e) ->
  		view.onFrame = activateYours
  		tool2.activate()
  
  	tool2 = new Tool()
  	tool2.onMouseDown = (e) ->
  		view.onFrame = activateMine
  		tool1.activate()
  	tool1.activate()
  */

  return view.draw();
};

$(document).ready(function() {
  setupPage();
  return setupEvents();
});