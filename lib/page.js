// Generated by IcedCoffeeScript 1.3.3b
var bindMouseDown, easeInOut, gotoGameOverMenu, pleaseWait, setupCanvas, setupEvents, setupGame, setupPage, socket, viewport, wdp, _ref;

easeInOut = function(x) {
  return Math.pow((Math.sin((x - 0.5) * Math.PI) + 1) * 0.5, 2);
};

bindMouseDown = function(sel, fn) {
  $(sel).bind("mousedown", fn);
  return $(sel).bind("touchstart", fn);
};

pleaseWait = {
  counter: 0,
  show: function() {
    pleaseWait.counter++;
    if (pleaseWait.counter > 0) return $("#pleaseWait").css("display", "block");
  },
  hide: function() {
    pleaseWait.counter--;
    if (pleaseWait.counter <= 0) return $("#pleaseWait").css("display", "none");
  }
};

wdp = (_ref = window.devicePixelRatio) != null ? _ref : 1;

viewport = document.querySelector("meta[name=viewport]");

viewport.setAttribute('content', "user-scalable=no, width=" + (320 * wdp) + ", height=" + (416 * wdp) + ", initial-scale=" + (1.0 / wdp) + ", maximum-scale=" + (1.0 / wdp));

socket = io.connect();

socket.on("connect", function() {
  return pleaseWait.hide();
});

socket.on("friendJoined", function() {
  return setupGame();
});

socket.on("friendDisconnected", function() {
  return gotoGameOverMenu("Your friend has left the game.");
});

window.onpopstate = function(e) {
  if (e.state === null) {
    pleaseWait.show();
    socket.emit("resetAll", function() {
      return pleaseWait.hide();
    });
    $("#menuView").addClass("enableTransitions");
    $("#mainMenu").removeClass("moveLeft");
    $("#mainMenu").removeClass("moveRight");
    $("#newMenu").addClass("moveRight");
    $("#joinMenu").addClass("moveRight");
    return $("#gameOverMenu").addClass("moveLeft");
  } else if (e.state.state === "newMenu") {
    $("#menuView").removeClass("enableTransitions");
    $("#mainMenu").addClass("moveLeft");
    $("#newMenu").removeClass("moveRight");
    return $("#joinMenu").addClass("moveRight");
  } else if (e.state.state === "joinMenu") {
    $("#menuView").removeClass("enableTransitions");
    $("#mainMenu").addClass("moveLeft");
    $("#newMenu").addClass("moveRight");
    return $("#joinMenu").removeClass("moveRight");
  } else if (e.state.state === "setupShips") {
    $("#menuView").removeClass("enableTransitions");
    $("#menuView").addClass("moveDown");
    return setupCanvas({
      state: e.state.board
    });
  }
};

setupPage = function() {
  var canvas;
  window.scrollTo(0, 1);
  $(document).bind("touchmove", function(e) {
    return e.preventDefault();
  });
  $(document).bind("touchstart", function(e) {
    if (!$(e.srcElement).hasClass("selectable")) return e.preventDefault();
  });
  $(document).bind("touchend", function(e) {
    if (!$(e.srcElement).hasClass("selectable")) return e.preventDefault();
  });
  pleaseWait.show();
  canvas = document.getElementById("canvas");
  canvas.setAttribute('width', "" + (320 * wdp));
  canvas.setAttribute('height', "" + (416 * wdp));
  paper.install(window);
  paper.setup(document.getElementById("canvas"));
  $("html, body").css("width", 320 * wdp);
  $("html, body").css("height", 416 * wdp);
  $("#menuView").css("-webkit-transform", "scale(" + wdp + ")");
  $("#menuView").css("display", "block");
  $("#pleaseWait div.container div.spinner").css("width", "" + (60 * wdp) + "px");
  $("#pleaseWait div.container div.spinner").css("height", "" + (60 * wdp) + "px");
  $("#pleaseWait div.container").css("padding", "" + (1.5 * wdp) + "em " + (1.5 * wdp) + "em " + (1.25 * wdp) + "em");
  $("#pleaseWait div.container").css("margin", "" + (153 * wdp) + "px " + (112 * wdp) + "px");
  return $("#gameId_Entry").focusout(function() {
    return window.scrollTo(0, 1);
  });
};

setupEvents = function() {
  bindMouseDown("#newGame_btn", function(e) {
    pleaseWait.show();
    return socket.emit("newGame", function(data) {
      if ((data != null) && data.status === "Game created") {
        $("#gameId").text(data.id);
        $("#menuView").addClass("enableTransitions");
        $("#mainMenu").addClass("moveLeft");
        $("#newMenu").removeClass("moveRight");
        history.pushState({
          state: "newMenu"
        }, "", "");
      } else {
        alert("Could not create game.");
        socket = io.connect();
      }
      return pleaseWait.hide();
    });
  });
  bindMouseDown("#joinGame_btn", function(e) {
    $("#menuView").addClass("enableTransitions");
    $("#mainMenu").addClass("moveLeft");
    $("#joinMenu").removeClass("moveRight");
    return history.pushState({
      state: "joinMenu"
    }, "", "");
  });
  bindMouseDown("#enterGameId_btn", function(e) {
    pleaseWait.show();
    return socket.emit("joinGame", $("#gameId_entry").text(), function(data) {
      if ((data != null) && data.status === "Game joined") {
        setupGame();
      } else {
        alert((data != null) && (data.status != null) ? data.status : "Could not join game.");
      }
      return pleaseWait.hide();
    });
  });
  return bindMouseDown("#gameOverOkay_btn", function(e) {
    return history.back();
  });
};

setupGame = function() {
  $("#menuViewContainer").addClass("enableTransitions");
  $("#menuViewContainer").addClass("moveDown");
  setupCanvas();
  return history.replaceState({
    state: "setupShips"
  }, "", "");
};

gotoGameOverMenu = function(msg) {
  $("#gameOver_msg").text(msg != null ? msg : "Something's happened.");
  setTimeout((function() {
    return setupCanvas({
      reset: true
    });
  }), 350);
  $("#menuView").removeClass("enableTransitions");
  $("#mainMenu").removeClass("moveLeft");
  $("#mainMenu").addClass("moveRight");
  $("#newMenu").addClass("moveRight");
  $("#joinMenu").addClass("moveRight");
  $("#gameOverMenu").removeClass("moveLeft");
  $("#menuViewContainer").addClass("enableTransitions");
  $("#menuViewContainer").removeClass("moveDown");
  return history.replaceState(null, "", "");
};

setupCanvas = function(data) {
  var activateMine, activateYours, gridl, gridl_s, hline, hline_s, hlines, i, lstyle, mainLayer, mine, mineBack, mineFront, mineGrid, mine_p, mine_s, tool1, tool2, vline, vline_s, vlines, yours, yoursBack, yoursFront, yoursGrid, yours_p, yours_s;
  mainLayer = project.activeLayer;
  if ((data != null) && data.reset) {
    while (mainLayer.children.length > 0) {
      mainLayer.children[0].remove();
    }
    $("#canvas").css("display", "none");
    return;
  }
  $("#canvas").css("display", "block");
  lstyle = {
    strokeColor: "white",
    strokeWidth: 2 * wdp,
    strokeCap: "round"
  };
  vline = new Path();
  vline.style = lstyle;
  vline.add([0, 0]);
  vline.add([0, 300 * wdp]);
  vline_s = new Symbol(vline);
  vlines = (function() {
    var _i, _results;
    _results = [];
    for (i = _i = 0; _i <= 10; i = ++_i) {
      _results.push(vline_s.place([i * 30 * wdp, 150 * wdp]));
    }
    return _results;
  })();
  hline = new Path();
  hline.style = lstyle;
  hline.add([0, 0]);
  hline.add([300 * wdp, 0]);
  hline_s = new Symbol(hline);
  hlines = (function() {
    var _i, _results;
    _results = [];
    for (i = _i = 0; _i <= 10; i = ++_i) {
      _results.push(hline_s.place([150 * wdp, i * 30 * wdp]));
    }
    return _results;
  })();
  gridl = new Group(vlines);
  gridl.addChildren(hlines);
  gridl_s = new Symbol(gridl);
  mineBack = new Layer();
  mainLayer.activate();
  mineGrid = gridl_s.place();
  mineFront = new Layer();
  mainLayer.activate();
  mine = new Group([mineBack, mineGrid, mineFront]);
  mine_s = new Symbol(mine);
  mine_p = mine_s.place([160 * wdp, 160 * wdp]);
  yoursBack = new Layer();
  mainLayer.activate();
  yoursGrid = gridl_s.place();
  yoursFront = new Layer();
  mainLayer.activate();
  yours = new Group([yoursBack, yoursGrid, yoursFront]);
  yours_s = new Symbol(yours);
  yours_p = yours_s.place([160 * wdp, 260 * wdp]);
  yours_p.scale(0.3, [160 * wdp, 410 * wdp]);
  view.draw();
  activateYours = function(e) {
    if (e.time > 0.2) {
      view.onFrame = null;
      mine_p.remove();
      mine_p = mine_s.place([160 * wdp, 160 * wdp]);
      mine_p.scale(0.3, [160 * wdp, 10 * wdp]);
      yours_p.remove();
      yours_p = yours_s.place([160 * wdp, 260 * wdp]);
      return yours_p.scale(1, [160 * wdp, 410 * wdp]);
    } else {
      mine_p.remove();
      mine_p = mine_s.place([160 * wdp, 160 * wdp]);
      mine_p.scale(1.0 - 0.7 * easeInOut(e.time / 0.2), [160 * wdp, 10 * wdp]);
      yours_p.remove();
      yours_p = yours_s.place([160 * wdp, 260 * wdp]);
      return yours_p.scale(1.0 - 0.7 * easeInOut(1 - e.time / 0.2), [160 * wdp, 410 * wdp]);
    }
  };
  activateMine = function(e) {
    if (e.time > 0.2) {
      view.onFrame = null;
      yours_p.remove();
      yours_p = yours_s.place([160 * wdp, 260 * wdp]);
      yours_p.scale(0.3, [160 * wdp, 410 * wdp]);
      mine_p.remove();
      mine_p = mine_s.place([160 * wdp, 160 * wdp]);
      return mine_p.scale(1, [160 * wdp, 10 * wdp]);
    } else {
      yours_p.remove();
      yours_p = yours_s.place([160 * wdp, 260 * wdp]);
      yours_p.scale(1.0 - 0.7 * easeInOut(e.time / 0.2), [160 * wdp, 410 * wdp]);
      mine_p.remove();
      mine_p = mine_s.place([160 * wdp, 160 * wdp]);
      return mine_p.scale(1.0 - 0.7 * easeInOut(1 - e.time / 0.2), [160 * wdp, 10 * wdp]);
    }
  };
  tool1 = new Tool();
  tool1.onMouseDown = function(e) {
    view.onFrame = activateYours;
    return tool2.activate();
  };
  tool2 = new Tool();
  return tool2.onMouseDown = function(e) {
    view.onFrame = activateMine;
    return tool1.activate();
  };
};

$(document).ready(function() {
  setupPage();
  return setupEvents();
});